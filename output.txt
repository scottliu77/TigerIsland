diff --git a/src/main/java/com/tigerisland/AI/DAXSAI.java b/src/main/java/com/tigerisland/AI/DAXSAI.java
index 9a02196..ff1a8e7 100644
--- a/src/main/java/com/tigerisland/AI/DAXSAI.java
+++ b/src/main/java/com/tigerisland/AI/DAXSAI.java
@@ -9,7 +9,7 @@ import com.tigerisland.game.pieces.Color;
 import java.util.ArrayList;
 import java.util.Random;
 
-public class DAXSAI extends AI {
+public class DaxsAI extends AI {
 
     private ArrayList<TilePlacement> validTilePlacements;
     private ArrayList<Location> validTotoroPlacements;
@@ -26,7 +26,7 @@ public class DAXSAI extends AI {
 
     private ArrayList<Location> plannedSettlementLocations;
 
-    public DAXSAI(){
+    public DaxsAI(){
         plannedSettlementLocations = new ArrayList<Location>();
         rand = new Random();
     }
diff --git a/src/main/java/com/tigerisland/client/ClientMessages.java b/src/main/java/com/tigerisland/client/ClientMessages.java
index 11f8ade..1f8a8c9 100644
--- a/src/main/java/com/tigerisland/client/ClientMessages.java
+++ b/src/main/java/com/tigerisland/client/ClientMessages.java
@@ -21,4 +21,5 @@ public class ClientMessages {
 
     public static final Pattern clientLostUnableToBuildPattern = Pattern.compile("GAME \\w+ MOVE \\w+ PLACE \\w+[\\+ ]?\\w+ AT -?\\d+ -?\\d+ -?\\d+ -?\\d+ UNABLE TO BUILD");
 
+    public static final Pattern sendScorePattern = Pattern.compile("GAME \\w+ OVER PLAYER \\w+ \\d+ PLAYER \\w+ \\d+");
 }
diff --git a/src/main/java/com/tigerisland/client/Message.java b/src/main/java/com/tigerisland/client/Message.java
index b33afed..4203f91 100644
--- a/src/main/java/com/tigerisland/client/Message.java
+++ b/src/main/java/com/tigerisland/client/Message.java
@@ -61,8 +61,16 @@ public class Message {
 
         checkForMakeMove();
 
+        checkForSendScore();
+
         checkForMatchOver();
 
+        checkForSendScore();
+
+        checkForClientSendScore();
+
+        checkForPlayerDoesNotKnowScore();
+
         checkForEndOfRound();
         checkForEndOfChallenge();
 
@@ -315,6 +323,21 @@ public class Message {
         }
     }
 
+    private void checkForClientSendScore() {
+        Matcher sendScoreMatcher = sendScorePattern.matcher(message);
+        while(sendScoreMatcher.find()) {
+            String match = sendScoreMatcher.group();
+
+            gameID = match.split("\\w+")[1];
+
+            ourPlayerID = match.split("\\w+")[4];
+            ourPlayerScore = match.split("\\d+")[5];
+
+            opponentID = match.split("\\w+")[7];
+            opponentScore = match.split("\\d+")[8];
+        }
+    }
+
     private void checkForEndOfChallenge() {
         Matcher endChallengeMatcher = ServerMessages.challengeWaitPattern.matcher(message);
         Matcher lastChallengeMatcher = ServerMessages.challengeEndPattern.matcher(message);
@@ -371,6 +394,16 @@ public class Message {
 
     }
 
+    private void checkForSendScore() {
+        Matcher matchMater = ServerMessages.serverRequestsGameOutcomePattern.matcher(message);
+        while(matchMater.find()) {
+            String match = matchMater.group();
+            gameID = match.split("\\s+")[1];
+
+
+        }
+    }
+
     private void checkForMatchOver() {
         Matcher matchMatcher = ServerMessages.gameOverPattern.matcher(message);
 
@@ -389,6 +422,18 @@ public class Message {
         }
     }
 
+    private void checkForPlayerDoesNotKnowScore() {
+        Matcher matchMatcher = ServerMessages.playerDoesNotKnowOutcomePattern.matcher(message);
+
+        while(matchMatcher.find()) {
+            String match = matchMatcher.group();
+
+            gameID = match.split("\\s+")[1];
+
+            ourPlayerID = match.split("\\s+")[3];
+        }
+    }
+
     private void checkForGameOver() {
         checkForIllegalTilePlacement();
         checkForIllegalBuild();
diff --git a/src/main/java/com/tigerisland/client/MessageType.java b/src/main/java/com/tigerisland/client/MessageType.java
index 16c54e5..68303c1 100644
--- a/src/main/java/com/tigerisland/client/MessageType.java
+++ b/src/main/java/com/tigerisland/client/MessageType.java
@@ -24,6 +24,7 @@ public enum  MessageType {
     FORFEITTIMEOUT("FORFEIT"),
     LOSTNOBUILD("FORFEIT"),
     FORFEITMALFORMED("FORFEIT"),
+    FORFEITWRONGSCORE("FOREFEIT"),
     GAMEOVER("GAMEOVER"),
 
     MAKEMOVE("MAKEMOVE"),
diff --git a/src/main/java/com/tigerisland/client/ServerMessages.java b/src/main/java/com/tigerisland/client/ServerMessages.java
index 0d969ab..24f27d2 100644
--- a/src/main/java/com/tigerisland/client/ServerMessages.java
+++ b/src/main/java/com/tigerisland/client/ServerMessages.java
@@ -29,5 +29,9 @@ public final class ServerMessages {
 
     public static final Pattern serverLostUnableToBuildPattern = Pattern.compile("LOST: UNABLE TO BUILD");
 
+    public static final Pattern serverRequestsGameOutcomePattern = Pattern.compile("GAME \\w+ OVER SEND OUTCOME");
+    public static final Pattern playerDoesNotKnowOutcomePattern = Pattern.compile("GAME \\w+ PLAYER \\w+ FORFEITED: DOES NOT KNOW OUTCOME");
+
+
 }
 
diff --git a/src/main/java/com/tigerisland/game/Game.java b/src/main/java/com/tigerisland/game/Game.java
index 0fa80fb..8681c55 100644
--- a/src/main/java/com/tigerisland/game/Game.java
+++ b/src/main/java/com/tigerisland/game/Game.java
@@ -4,6 +4,7 @@ import com.tigerisland.game.board.Board;
 import com.tigerisland.game.board.Tile;
 import com.tigerisland.game.moves.Move;
 import com.tigerisland.game.player.Player;
+import com.tigerisland.game.player.Score;
 import com.tigerisland.settings.GameSettings;
 import com.tigerisland.client.Client;
 import com.tigerisland.client.Message;
@@ -30,6 +31,9 @@ public class Game implements Runnable {
     Player winner;
     Player loser;
 
+    Score ourScore;
+    Score opponentScore;
+
     public Game(GameSettings gameSettings){
         this.ourPlayerID = gameSettings.getGlobalSettings().getServerSettings().getPlayerID();
 
diff --git a/src/test/java/com/tigerisland/client/MessageTest.java b/src/test/java/com/tigerisland/client/MessageTest.java
index 4287063..90bf7cc 100644
--- a/src/test/java/com/tigerisland/client/MessageTest.java
+++ b/src/test/java/com/tigerisland/client/MessageTest.java
@@ -177,6 +177,18 @@ public class MessageTest {
     }
 
     @Test
+    public void testCanGetSendScore() {
+        Message message = new Message("GAME 1 OVER SEND OUTCOME");
+        assertTrue(message.getGameID().equals("1"));
+    }
+
+    @Test
+    public void testCanTellPlayerDoesNotKnowScore() {
+        Message message = new Message("GAME 1 PLAYER 7 FORFEITED: DOES NOT KNOW OUTCOME");
+        assertTrue(message.getGameID().equals("1") && message.getOurPlayerID().equals("7"));
+    }
+
+    @Test
     public void testCanGetOpponentIDandScore() {
         // TODO Fix bad default first player is always 'our player' second is always 'opponent'
         Message message = new Message("GAME A OVER PLAYER 7 25 PLAYER 13 100");
